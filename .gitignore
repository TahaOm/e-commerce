
# Created by https://www.toptal.com/developers/gitignore/api/django
# Edit at https://www.toptal.com/developers/gitignore?templates=django

# back_end

### Django ###
back_end/*.log
back_end/*.pot
back_end/*.pyc
back_end/__pycache__/
back_end/local_settings.py
back_end/db.sqlite3
back_end/db.sqlite3-journal

# If your build process includes running collectstatic, then you probably don't need or want to include staticfiles/
# in your Git repository. Update and uncomment the following line accordingly.
# <django-project-name>/staticfiles/

### Django.Python Stack ###
# Byte-compiled / optimized / DLL files
back_end/*.py[cod]
back_end/*$py.class

# C extensions
back_end/*.so

# Distribution / packaging
back_end/.Python
back_end/build/
back_end/develop-eggs/
back_end/dist/
back_end/downloads/
back_end/eggs/
back_end/.eggs/
back_end/lib/
back_end/lib64/
back_end/parts/
back_end/sdist/
back_end/var/
back_end/wheels/
back_end/share/python-wheels/
back_end/*.egg-info/
back_end/.installed.cfg
back_end/*.egg
back_end/MANIFEST

# PyInstaller
#  Usually these files are written by a python script from a template
#  before PyInstaller builds the exe, so as to inject date/other infos into it.
back_end/*.manifest
back_end/*.spec

# Installer logs
back_end/pip-log.txt
back_end/pip-delete-this-directory.txt

# Unit test / coverage reports
back_end/htmlcov/
back_end/.tox/
back_end/.nox/
back_end/.coverage
back_end/.coverage.*
back_end/.cache
back_end/nosetests.xml
back_end/coverage.xml
back_end/*.cover
back_end/*.py,cover
back_end/.hypothesis/
back_end/.pytest_cache/
back_end/cover/

# Translations
back_end/*.mo

# Django stuff:

# Flask stuff:
back_end/instance/
back_end/.webassets-cache

# Scrapy stuff:
back_end/.scrapy

# Sphinx documentation
back_end/docs/_build/

# PyBuilder
back_end/.pybuilder/
back_end/target/

# Jupyter Notebook
back_end/.ipynb_checkpoints

# IPython
back_end/profile_default/
back_end/ipython_config.py

# pyenv
#   For a library or package, you might want to ignore these files since the code is
#   intended to run in multiple environments; otherwise, check them in:
# .python-version

# pipenv
#   According to pypa/pipenv#598, it is recommended to include Pipfile.lock in version control.
#   However, in case of collaboration, if having platform-specific dependencies or dependencies
#   having no cross-platform support, pipenv may install dependencies that don't work, or not
#   install all needed dependencies.
#Pipfile.lock

# PEP 582; used by e.g. github.com/David-OConnor/pyflow
back_end/__pypackages__/

# Celery stuff
back_end/celerybeat-schedule
back_end/celerybeat.pid

# SageMath parsed files
back_end/*.sage.py

# Environments
back_end/.env
back_end/.venv
back_end/env/
back_end/venv/
back_end/ENV/
back_end/env.bak/
back_end/venv.bak/

# Spyder project settings
back_end/.spyderproject
back_end/.spyproject

# Rope project settings
back_end/.ropeproject

# mkdocs documentation
back_end/site

# mypy
back_end/.mypy_cache/
back_end/.dmypy.json
back_end/dmypy.json

# Pyre type checker
back_end/.pyre/

# pytype static type analyzer
back_end/.pytype/

# Cython debug symbols
back_end/cython_debug/

# front_end

# End of https://www.toptal.com/developers/gitignore/api/django

# See https://help.github.com/articles/ignoring-files/ for more about ignoring files.

# dependencies
front_end/node_modules
front_end/.pnp
front_end/.pnp.js

# testing
front_end/coverage

# next.js
front_end/.next/
front_end/out/

# production
front_end/build

# misc
front_end/.DS_Store
front_end/*.pem

# debug
front_end/npm-debug.log*
front_end/yarn-debug.log*
front_end/yarn-error.log*

# local env files
front_end/.env.local
front_end/.env.development.local
front_end/.env.test.local
front_end/.env.production.local

# vercel
front_end/.vercel
